---
- name: Upgrade software on the cluster.
  hosts: cluster
  become: true

  tasks:
    # Update non-kubernetes software
    - name: Upgrade all software.
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist

    - name: Check if a reboot is required.
      stat:
        path: /var/run/reboot-required
        get_checksum: false
      register: reboot_required_file

    - name: Reboot the server (if required).
      reboot:
      when: reboot_required_file.stat.exists == true

    - name: Remove dependencies that are no longer required.
      apt:
        autoremove: true

    - name: Upgrade kube libraries.
      ansible.builtin.package:
        name:
          - python3-pip
          - python3-setuptools
          - python3-openshift
          - python3-yaml
          - build-essential
          - golang
          - git
        state: latest

- name: Upgrade pods on the cluster.
  hosts: control_plane
  become: true

  environment:
    # The location of the kubeconfig file on the master.
    K8S_AUTH_KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    PATH: "~/go/bin:{{ ansible_env.PATH }}"

  tasks:
    # Upgrade kube pip libraries.
    - name: Upgrade kube pip libraries.
      ansible.builtin.pip:
        name:
          - kubernetes
          - openshift
        state: latest
    
    # Upgrade helm diff
    - name: Check if Helm diff plugin is already installed
      ansible.builtin.command: helm plugin list
      register: helm_plugin_list
      changed_when: false
      failed_when: false

    - name: Install Helm diff plugin if not present
      ansible.builtin.command: >
        helm plugin install https://github.com/databus23/helm-diff
      when: "'diff' not in helm_plugin_list.stdout"

    - name: Update Helm diff plugin if already installed
      ansible.builtin.command: helm plugin update diff
      when: "'diff' in helm_plugin_list.stdout"

    - name: Show final installed Helm plugins
      ansible.builtin.command: helm plugin list
      register: final_plugins
      changed_when: false

    - name: Display installed plugins
      ansible.builtin.debug:
        var: final_plugins.stdout_lines

    # Update helm pods
    - name: Force rollout of metrics-server by updating annotation
      kubernetes.core.k8s:
        state: present
        merge_type: strategic-merge
        resource_definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: metrics-server
            namespace: metric-server
          spec:
            template:
              metadata:
                annotations:
                  rollout-trigger: "{{ ansible_date_time.iso8601 }}"
    
    - name: Force Grafana rollout by adding annotation
      kubernetes.core.k8s:
        kind: Deployment
        api_version: apps/v1
        name: cluster-monitoring-grafana
        namespace: default
        merge_type: strategic-merge
        resource_definition:
          spec:
            template:
              metadata:
                annotations:
                  rollout-trigger: "{{ ansible_date_time.iso8601 }}"
    
    - name: Get all namespaces
      kubernetes.core.k8s_info:
        kind: Namespace
      register: namespaces

    - name: Get all deployments in each namespace
      kubernetes.core.k8s_info:
        kind: Deployment
        namespace: "{{ item.metadata.name }}"
      loop: "{{ namespaces.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"
      register: all_deployments

    - name: Flatten all deployments with namespace info
      set_fact:
        deployments_all_namespaces: >-
          {{
            deployments_all_namespaces | default([]) +
            (item.resources | default([]) | map('combine', {'_namespace': item.item.metadata.name}) | list)
          }}
      loop: "{{ all_deployments.results }}"

    - name: Restart all deployments
      kubernetes.core.k8s:
        kind: Deployment
        name: "{{ item.metadata.name }}"
        namespace: "{{ item._namespace }}"
        definition:
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ ansible_date_time.iso8601 }}"
        merge_type:
          - strategic-merge
          - merge
      loop: "{{ deployments_all_namespaces }}"
      loop_control:
        label: "{{ item._namespace }}/{{ item.metadata.name }}"

    - name: Show commands to update Python Kubernetes client and Ansible collection
      ansible.builtin.debug:
        msg: |
          To update your local environment, run the following commands:

          # Upgrade Ansible Kubernetes collection
          ansible-galaxy collection install kubernetes.core --upgrade

# TODO: Add nfs helm upgrade

- name: Upgrade software on the cluster.
  hosts: pikvms
  become: true
  tasks:
    - name: Gather OS distribution info
      ansible.builtin.setup:
        filter: ansible_distribution
        gather_subset: min

    - name: Remount root filesystem as read-write (Arch only)
      ansible.builtin.command: rw
      when: ansible_distribution == "Archlinux"
    
    - name: Update pikvm software
      ansible.builtin.command: pikvm-update
      register: upgrade_output
      changed_when: "'Your PiKVM is already up-to-date' not in upgrade_output.stdout"
    
    - name: Remount root filesystem as read-only (Arch only)
      ansible.builtin.command: mount -o remount,ro /
      when: ansible_distribution == "Archlinux"